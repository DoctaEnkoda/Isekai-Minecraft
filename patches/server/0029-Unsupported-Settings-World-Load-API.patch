From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bierque Jason <bierquejason@gmail.com>
Date: Sat, 12 Aug 2023 17:11:16 +0200
Subject: [PATCH] Unsupported Settings : World Load API


diff --git a/src/main/java/fr/euphilia/tenseimc/TenseiConfig.java b/src/main/java/fr/euphilia/tenseimc/TenseiConfig.java
index 8b5f44d8a9d6b4bc66ad2a6554ca48ad76d7ae41..fd2dbe80228d6a77785ff53728cff6817e5fcaa1 100644
--- a/src/main/java/fr/euphilia/tenseimc/TenseiConfig.java
+++ b/src/main/java/fr/euphilia/tenseimc/TenseiConfig.java
@@ -153,7 +153,9 @@ public class TenseiConfig {
     }
 
     public static boolean useVanillaEndTeleportation = false;
+    public static boolean createWorldDisabled = true;
     private static void settingsUnsupported() {
         useVanillaEndTeleportation = getBoolean("settings.unsupported.pr-folia.vanilla-end-teleportation", useVanillaEndTeleportation);
+        createWorldDisabled = getBoolean("settings.unsupported.create-world-api-disabled", createWorldDisabled);
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 758bcbf493bf7e3b65086f8b38750f28c83dadcb..79fcb7e1b5867339d5bad1f2ff8ac072eda43a3a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -744,6 +744,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             int i1 = -1;
             boolean flag2 = true;
 
+            // TenseiMC start - TODO rewrite
+            /*
             for (int j1 = 0; j1 < Mth.square(11); ++j1) {
                 if (j >= -5 && j <= 5 && k >= -5 && k <= 5) {
                     BlockPos blockposition1 = PlayerRespawnLogic.getSpawnPosInChunk(world, new ChunkPos(chunkcoordintpair.x + j, chunkcoordintpair.z + k));
@@ -764,7 +766,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 j += l;
                 k += i1;
             }
-
+            */
+            // TenseiMC end - TODO rewrite
             if (bonusChest) {
                 world.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((iregistry) -> {
                     return iregistry.getHolder(MiscOverworldFeatures.BONUS_CHEST);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3967cbb51ed68f92bbe711f95b080617893e1df0..b31aad316d16389ee39c08a74453aa713ed93886 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1293,7 +1293,7 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
-        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+        if (fr.euphilia.tenseimc.TenseiConfig.createWorldDisabled) throw new UnsupportedOperationException(); // Folia - not implemented properly yet // TenseiMC
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1413,6 +1413,11 @@ public final class CraftServer implements Server {
         if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
             return null;
         }
+        // TenseiMC start
+        if (internal.randomSpawnSelection == null) {
+            internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        }
+        // TenseiMC end
 
         this.console.addLevel(internal); // Paper - move up
         this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
@@ -1422,6 +1427,7 @@ public final class CraftServer implements Server {
 
         internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
+        io.papermc.paper.threadedregions.RegionizedServer.getInstance().addWorld(internal); // TenseiMC
         //internal.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - rewrite chunk system
 
         this.pluginManager.callEvent(new WorldLoadEvent(internal.getWorld()));
