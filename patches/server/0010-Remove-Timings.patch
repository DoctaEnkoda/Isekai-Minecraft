From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bierque Jason <bierquejason@gmail.com>
Date: Sat, 3 Jun 2023 20:34:02 +0200
Subject: [PATCH] Remove Timings


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 112029cb275d45dced60807820f1bfe9f394496d..d9083c1712828469656682954d3fbd187f80dd63 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -163,7 +163,8 @@ public final class MinecraftTimings {
         return Timings.ofSafe("Command Function - " + function.getId());
     }
 
-    public static void processConfig(GlobalConfiguration.Timings config) {
+    // TenseiMC start - remove timings
+    /*public static void processConfig(GlobalConfiguration.Timings config) {
         TimingsManager.url = config.url;
         if (!TimingsManager.url.endsWith("/")) {
             TimingsManager.url += "/";
@@ -177,5 +178,5 @@ public final class MinecraftTimings {
         co.aikar.timings.Timings.setTimingsEnabled(config.enabled);
         co.aikar.timings.Timings.setHistoryInterval(config.historyInterval * 20);
         co.aikar.timings.Timings.setHistoryLength(config.historyLength * 20);
-    }
+    }*/ // TenseiMC end - remove timings
 }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index 8580ddfeb9cab5ba3d7c5cea836bdb67e49bab50..44dcba3318cf1f4b0447a91934a66b708577ce63 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -1536,9 +1536,9 @@ public final class ChunkHolderManager {
     }
 
     public boolean processTicketUpdates() {
-        co.aikar.timings.MinecraftTimings.distanceManagerTick.startTiming(); try { // Paper - add timings for distance manager
+        // co.aikar.timings.MinecraftTimings.distanceManagerTick.startTiming(); try { // Paper - add timings for distance manager // TenseiMC - remove timings
         return this.processTicketUpdates(true, true, null);
-        } finally { co.aikar.timings.MinecraftTimings.distanceManagerTick.stopTiming(); } // Paper - add timings for distance manager
+        // } finally { co.aikar.timings.MinecraftTimings.distanceManagerTick.stopTiming(); } // Paper - add timings for distance manager  // TenseiMC - remove timings
     }
 
     private static final ThreadLocal<List<ChunkProgressionTask>> CURRENT_TICKET_UPDATE_SCHEDULING = new ThreadLocal<>();
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index dc60f4af918c2bd73873cadfb69e5572173b8e46..6d6be841bbb66ecd59cf0f8aa3e16db4b08885b3 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1791,7 +1791,7 @@ public final class NewChunkHolder {
         boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
         boolean canSaveEntities = entities != null;
 
-        try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
+        // try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper  // TenseiMC - remove timings
             if (canSaveChunk) {
                 canSaveChunk = this.saveChunk(chunk, unloading);
             }
@@ -1805,7 +1805,7 @@ public final class NewChunkHolder {
                     this.lastEntityUnload = null;
                 }
             }
-        }
+        // } // TenseiMC - remove timings
 
         return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
     }
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 3b83f25a24d6f9cdbf131d5a4432fb4ad018be4e..8571b6e014fd43530bb17f34a9141a5f69eefc50 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -1,6 +1,6 @@
 package io.papermc.paper.configuration;
 
-import co.aikar.timings.MinecraftTimings;
+// import co.aikar.timings.MinecraftTimings; // TenseiMC - remove timings
 import io.papermc.paper.configuration.constraint.Constraint;
 import io.papermc.paper.configuration.constraint.Constraints;
 import net.kyori.adventure.text.Component;
@@ -47,10 +47,11 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean useDisplayNameInQuitMessage = false;
     }
 
+    /* // TenseiMC start - remove timings
     public Timings timings;
 
     public class Timings extends ConfigurationPart.Post {
-        public boolean enabled = true;
+        public boolean enabled = false; // TenseiMC - remove timings
         public boolean verbose = true;
         public String url = "https://timings.aikar.co/";
         public boolean serverNamePrivacy = false;
@@ -64,9 +65,10 @@ public class GlobalConfiguration extends ConfigurationPart {
 
         @Override
         public void postProcess() {
-            MinecraftTimings.processConfig(this);
+            // MinecraftTimings.processConfig(this);
         }
     }
+    */ // TenseiMC end - remove timings
 
     public Proxies proxies;
 
diff --git a/src/main/java/net/minecraft/commands/CommandFunction.java b/src/main/java/net/minecraft/commands/CommandFunction.java
index 8273ee1c5e513f02c9743ee38c9b7cf700e2ecad..65f3e0bddff0bf6ac0ed234c9ec43fb8978de9cc 100644
--- a/src/main/java/net/minecraft/commands/CommandFunction.java
+++ b/src/main/java/net/minecraft/commands/CommandFunction.java
@@ -17,13 +17,15 @@ public class CommandFunction {
     private final CommandFunction.Entry[] entries;
     final ResourceLocation id;
     // Paper start
-    public co.aikar.timings.Timing timing;
+    // TenseiMC start - remove timings
+    /*public co.aikar.timings.Timing timing;
     public co.aikar.timings.Timing getTiming() {
         if (timing == null) {
             timing = co.aikar.timings.MinecraftTimings.getCommandFunctionTiming(this);
         }
         return timing;
-    }
+    }*/
+    // TenseiMC end - remove timings
     // Paper end
 
     public CommandFunction(ResourceLocation id, CommandFunction.Entry[] elements) {
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index b07df826a3028c14b48b09dbaeccc9078d7cc992..d2ee4431adf5a0348790eb848f166a639c661fec 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -47,8 +47,8 @@ public class PacketUtils {
                 try { // Paper - detailed watchdog information
                 if (MinecraftServer.getServer().hasStopped() || (listener instanceof ServerGamePacketListenerImpl && ((ServerGamePacketListenerImpl) listener).processedDisconnect)) return; // CraftBukkit, MC-142590
                 if (listener.isAcceptingMessages()) {
-                    co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings
-                    try (co.aikar.timings.Timing ignored = timing.startTiming()) { // Paper - timings
+                    // co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings  // TenseiMC - remove timings
+                    try /*(co.aikar.timings.Timing ignored = timing.startTiming())*/ { // Paper - timings // TenseiMC - remove timings
                         packet.handle(listener);
                     } catch (Exception exception) {
                         if (listener.shouldPropagateHandlingExceptions()) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1893011417019a6de933b127a784acc9e61e12f4..bf5491d59e8ecb65a259f03561808241801a074b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
+// import co.aikar.timings.Timings; // TenseiMC - remove timings
 import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
 import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
@@ -192,7 +192,7 @@ import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
 
@@ -1015,7 +1015,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         MinecraftServer.LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Shutdown and don't bother finishing
-        MinecraftTimings.stopServer(); // Paper
+        // MinecraftTimings.stopServer(); // Paper // TenseiMC - remove timings
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -1498,16 +1498,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         };
         new com.destroystokyo.paper.event.server.ServerTickStartEvent((int)region.getCurrentTick()).callEvent(); // Paper
         // Folia end - region threading
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
+        // co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper // TenseiMC - remove timings
         long i = startTime; // Folia - region threading
 
         // Paper start - move oversleep into full server tick
         if (region == null) { // Folia - region threading
-        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        isOversleep = true;// MinecraftTimings.serverOversleep.startTiming(); // TenseiMC - remove timings
         this.managedBlock(() -> {
             return !this.canOversleep();
         });
-        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        isOversleep = false;// MinecraftTimings.serverOversleep.stopTiming(); // TenseiMC - remove timings
         } // Folia - region threading
         // Paper end
         // Folia - region threading - move up
@@ -1563,9 +1563,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end
         io.papermc.paper.util.CachedLists.reset(); // Paper
         // Paper start - move executeAll() into full server tick timing
-        if (region == null) try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) { // Folia - region threading
+        if (region == null) //try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) { // Folia - region threading // TenseiMC - remove timings
             this.runAllTasks();
-        }
+        //} // TenseiMC - remove timings
         // Paper end
         // Paper start
         long endTime = System.nanoTime();
@@ -1576,7 +1576,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Folia - region threading
         this.profiler.pop();
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
+        // co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper // TenseiMC - remove timings
     }
 
     // Folia start - region threading
@@ -1614,26 +1614,26 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public void tickChildren(BooleanSupplier shouldKeepTicking, io.papermc.paper.threadedregions.TickRegions.TickRegionData region) { // Folia - region threading
-        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
+        // MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper // TenseiMC - remove timings
        // Folia - region threading
-        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
+        // MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper // TenseiMC - remove timings
         // Folia - region threading - moved to global tick
         this.profiler.push("commandFunctions");
-        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
+        // MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper // TenseiMC - remove timings
         if (region == null) this.getFunctions().tick(); // Folia - region threading - TODO Purge functions
-        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
+        // MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper // TenseiMC - remove timings
         this.profiler.popPush("levels");
         //Iterator iterator = this.getAllLevels().iterator(); // Paper - moved down
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
+        // MinecraftTimings.processQueueTimer.startTiming(); // Spigot // TenseiMC - remove timings
         if (region == null) while (!this.processQueue.isEmpty()) { // Folia - region threading
             this.processQueue.remove().run();
         }
-        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
+        // MinecraftTimings.processQueueTimer.stopTiming(); // Spigot // TenseiMC - remove timings
 
-        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
+        // MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper // TenseiMC - remove timings
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - optimize time updates
        for (final ServerLevel world : (region == null ? this.getAllLevels() : Arrays.asList(region.world))) { // Folia - region threading
@@ -1653,7 +1653,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
         // Paper end
-        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
+        // MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper // TenseiMC - remove timings
 
         if (region == null) this.isIteratingOverLevels = true; // Paper // Folia - region threading
         Iterator iterator = region == null ? this.getAllLevels().iterator() : Arrays.asList(region.world).iterator(); // Paper - move down // Folia - region threading
@@ -1675,14 +1675,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.profiler.push("tick");
 
             try {
-                worldserver.timings.doTick.startTiming(); // Spigot
+                // worldserver.timings.doTick.startTiming(); // Spigot // TenseiMC - remove timings
                 worldserver.tick(shouldKeepTicking, region); // Folia - region threading
                 // Paper start
                 for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) {
                     regionManager.recalculateRegions();
                 }
                 // Paper end
-                worldserver.timings.doTick.stopTiming(); // Spigot
+                // worldserver.timings.doTick.stopTiming(); // Spigot // TenseiMC - remove timings
             } catch (Throwable throwable) {
                 // Spigot Start
                 CrashReport crashreport;
@@ -1705,24 +1705,24 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (region == null) this.isIteratingOverLevels = false; // Paper // Folia - region threading
 
         this.profiler.popPush("connection");
-        MinecraftTimings.connectionTimer.startTiming(); // Spigot
+        // MinecraftTimings.connectionTimer.startTiming(); // Spigot // TenseiMC - remove timings
         if (region == null) this.getConnection().tick(); // Folia - region threading - moved into post entity scheduler tick
-        MinecraftTimings.connectionTimer.stopTiming(); // Spigot
+        // MinecraftTimings.connectionTimer.stopTiming(); // Spigot // TenseiMC - remove timings
         this.profiler.popPush("players");
-        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
+        // MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper // TenseiMC - remove timings
         if (false) this.playerList.tick(); // Folia - region threading
-        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
+        // MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper // TenseiMC - remove timings
         if (SharedConstants.IS_RUNNING_IN_IDE) {
             GameTestTicker.SINGLETON.tick();
         }
 
         this.profiler.popPush("server gui refresh");
 
-        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
+        // MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper // TenseiMC - remove timings
         if (region == null) for (int i = 0; i < this.tickables.size(); ++i) {  // Folia - region threading - TODO WTF is this?
             ((Runnable) this.tickables.get(i)).run();
         }
-        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
+        // MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper // TenseiMC - remove timings
 
         this.profiler.pop();
     }
@@ -2894,7 +2894,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             return;
         }
 
-        co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
+        // co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming(); // TenseiMC - remove timings
         try {
             for (;;) {
                 boolean moreTasks = this.tickMidTickTasks(worldData); // Folia - region threading
@@ -2921,7 +2921,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 }
             }
         } finally {
-            co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming();
+            // co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming(); // TenseiMC - remove timings
         }
     }
     // Paper end - execute chunk tasks mid tick
diff --git a/src/main/java/net/minecraft/server/ServerFunctionManager.java b/src/main/java/net/minecraft/server/ServerFunctionManager.java
index 6483a1d461904a0584b6808b2f86ac7329bba963..2b4e6815221164a4590f595a853c86803348fe3f 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionManager.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionManager.java
@@ -88,7 +88,7 @@ public class ServerFunctionManager {
         } else {
             int i;
 
-            try (co.aikar.timings.Timing timing = function.getTiming().startTiming()) { // Paper
+            try /*(co.aikar.timings.Timing timing = function.getTiming().startTiming())*/ { // Paper // TenseiMC - remove timings
                 this.context = new ServerFunctionManager.ExecutionContext(tracer);
                 i = this.context.runTopCommand(function, source);
             } finally {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bc3105fc05c45ac5e8f953b3b4377b1b6a305e89..615607c4b7a93f7fdf9e3dc25453cc40e6043c30 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -58,7 +58,7 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -493,7 +493,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     }
 
     public void handleConsoleInputs() {
-        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
+        // MinecraftTimings.serverCommandTimer.startTiming(); // Spigot // TenseiMC - remove timings
         // Paper start - use proper queue
         ConsoleInput servercommand;
         while ((servercommand = this.serverCommandQueue.poll()) != null) {
@@ -510,7 +510,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             // CraftBukkit end
         }
 
-        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
+        // MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot // TenseiMC - remove timings
     }
 
     @Override
@@ -781,7 +781,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                     }
                 };
                 waitableArray[0] = waitable;
-                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+                // co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable)); // TenseiMC - remove timings
             } else {
             // Paper end
             ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), this.rconConsoleSource.createCommandSourceStack());
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index c8bc7db4c22f48047aa409f0bcff3ef8c4034781..8f5288573fda040848b4d2881096a1d2825ba2a1 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1,6 +1,6 @@
 package net.minecraft.server.level;
 
-import co.aikar.timings.Timing; // Paper
+// import co.aikar.timings.Timing; // Paper // TenseiMC - remove timings
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
@@ -502,15 +502,15 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     protected void tick(BooleanSupplier shouldKeepTicking) {
         ProfilerFiller gameprofilerfiller = this.level.getProfiler();
 
-        try (Timing ignored = this.level.timings.poiUnload.startTiming()) { // Paper
+        //try (Timing ignored = this.level.timings.poiUnload.startTiming()) { // Paper // TenseiMC - remove timings
         gameprofilerfiller.push("poi");
         this.poiManager.tick(shouldKeepTicking);
-        } // Paper
+        // } // Paper // TenseiMC - remove timings
         gameprofilerfiller.popPush("chunk_unload");
         if (!this.level.noSave()) {
-            try (Timing ignored = this.level.timings.chunkUnload.startTiming()) { // Paper
+            // try (Timing ignored = this.level.timings.chunkUnload.startTiming()) { // Paper // TenseiMC - remove timings
             this.processUnloads(shouldKeepTicking);
-            } // Paper
+            // } // Paper // TenseiMC - remove timings
         }
 
         gameprofilerfiller.pop();
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index e664c568aba954e04878c06f3671ae74673dd342..764361de9de4b1ce2be9f9f3021d7329fbb34943 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -396,10 +396,10 @@ public class ServerChunkCache extends ChunkSource {
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
                 // Paper end
                 com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
-                this.level.timings.syncChunkLoad.startTiming(); // Paper
+                // this.level.timings.syncChunkLoad.startTiming(); // Paper // TenseiMC - remove timings
             chunkproviderserver_b.managedBlock(completablefuture::isDone);
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
-                this.level.timings.syncChunkLoad.stopTiming(); // Paper
+                // this.level.timings.syncChunkLoad.stopTiming(); // Paper // TenseiMC - remove timings
             } // Paper
             ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
                 return ichunkaccess1;
@@ -548,17 +548,17 @@ public class ServerChunkCache extends ChunkSource {
 
     public void save(boolean flush) {
         this.runDistanceManagerUpdates();
-        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
+        // try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings // TenseiMC - remove timings
         this.chunkMap.saveAllChunks(flush);
-        } // Paper - Timings
+        // } // Paper - Timings // TenseiMC - remove timings
     }
 
     // Paper start - duplicate save, but call incremental
     public void saveIncrementally() {
         this.runDistanceManagerUpdates();
-        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
+        // try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings // TenseiMC - remove timings
             this.chunkMap.saveIncrementally();
-        } // Paper - Timings
+        // } // Paper - Timings // TenseiMC - remove timings
     }
     // Paper end
 
@@ -588,22 +588,22 @@ public class ServerChunkCache extends ChunkSource {
     @Override
     public void tick(BooleanSupplier shouldKeepTicking, boolean tickChunks) {
         this.level.getProfiler().push("purge");
-        this.level.timings.doChunkMap.startTiming(); // Spigot
+        // this.level.timings.doChunkMap.startTiming(); // Spigot // TenseiMC - remove timings
         this.distanceManager.purgeStaleTickets();
         this.runDistanceManagerUpdates();
-        this.level.timings.doChunkMap.stopTiming(); // Spigot
+        // this.level.timings.doChunkMap.stopTiming(); // Spigot // TenseiMC - remove timings
         this.level.getProfiler().popPush("chunks");
         if (tickChunks) {
-            this.level.timings.chunks.startTiming(); // Paper - timings
+            // this.level.timings.chunks.startTiming(); // Paper - timings // TenseiMC - remove timings
             this.chunkMap.level.playerChunkLoader.tick(); // Paper - replace player chunk loader - this is mostly required to account for view distance changes
             this.tickChunks();
-            this.level.timings.chunks.stopTiming(); // Paper - timings
+            // this.level.timings.chunks.stopTiming(); // Paper - timings // TenseiMC - remove timings
         }
 
-        this.level.timings.doChunkUnload.startTiming(); // Spigot
+        // this.level.timings.doChunkUnload.startTiming(); // Spigot // TenseiMC - remove timings
         this.level.getProfiler().popPush("unload");
         this.chunkMap.tick(shouldKeepTicking);
-        this.level.timings.doChunkUnload.stopTiming(); // Spigot
+        // this.level.timings.doChunkUnload.stopTiming(); // Spigot // TenseiMC - remove timings
         this.level.getProfiler().pop();
         this.clearCache();
     }
@@ -661,19 +661,19 @@ public class ServerChunkCache extends ChunkSource {
             boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && this.level.getRedstoneGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit // Folia - region threading
 
             gameprofilerfiller.push("naturalSpawnCount");
-            this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
+            // this.level.timings.countNaturalMobs.startTiming(); // Paper - timings // TenseiMC - remove timings
             int l = this.distanceManager.getNaturalSpawnChunkCount();
             // Paper start - per player mob spawning
             NaturalSpawner.SpawnState spawnercreature_d; // moved down
             // Folia start - threaded regions - revert per-player mob caps
             spawnercreature_d = this.spawnFriendlies || this.spawnEnemies ? NaturalSpawner.createState(l, regionizedWorldData.getLocalEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap)) : null; // Folia - region threading
             // Folia end - threaded regions - revert per-player mob caps
-            this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings
+            // this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings // TenseiMC - remove timings
 
             regionizedWorldData.lastSpawnState = spawnercreature_d; // Folia - region threading
             gameprofilerfiller.popPush("filteringLoadedChunks");
             // Paper - moved down
-            this.level.timings.chunkTicks.startTiming(); // Paper
+            // this.level.timings.chunkTicks.startTiming(); // Paper // TenseiMC - remove timings
 
             // Paper - moved down
 
@@ -727,17 +727,17 @@ public class ServerChunkCache extends ChunkSource {
                 }
             }
             // Paper end - optimise chunk tick iteration
-            this.level.timings.chunkTicks.stopTiming(); // Paper
+            // this.level.timings.chunkTicks.stopTiming(); // Paper // TenseiMC - remove timings
             gameprofilerfiller.popPush("customSpawners");
             if (flag2) {
-                try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings
+                // try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings // TenseiMC - remove timings
                 this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
-                } // Paper - timings
+                // } // Paper - timings // TenseiMC - remove timings
             }
             gameprofilerfiller.pop();
             // Paper start - use set of chunks requiring updates, rather than iterating every single one loaded
             gameprofilerfiller.popPush("broadcast");
-            this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing
+            // this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing // TenseiMC - remove timings
             // Folia start - region threading
             if (!this.level.needsChangeBroadcasting.isEmpty()) {
                 for (Iterator<ChunkHolder> iterator = this.level.needsChangeBroadcasting.iterator(); iterator.hasNext();) {
@@ -754,7 +754,7 @@ public class ServerChunkCache extends ChunkSource {
                     }
                 }
             }
-            this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing
+            // this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing // TenseiMC - remove timings
             gameprofilerfiller.pop();
             // Paper end - use set of chunks requiring updates, rather than iterating every single one loaded
             // Paper start - controlled flush for entity tracker packets
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6db245339eaa2c72253231d1e71c363d916c30b5..819833bde1e526409a112394af3cba1dbd93efcc 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1,7 +1,7 @@
 package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
-import co.aikar.timings.TimingHistory; // Paper
+// import co.aikar.timings.TimingHistory; // Paper // TenseiMC - remove timings
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
@@ -719,7 +719,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (region == null) this.updateSkyBrightness(); // Folia - region threading
         this.tickTime();
         gameprofilerfiller.popPush("tickPending");
-        timings.scheduledBlocks.startTiming(); // Paper
+        // timings.scheduledBlocks.startTiming(); // Paper // TenseiMC - remove timings
         if (!this.isDebug()) {
             j = regionizedWorldData.getRedstoneGameTime(); // Folia - region threading
             gameprofilerfiller.push("blockTicks");
@@ -728,20 +728,20 @@ public class ServerLevel extends Level implements WorldGenLevel {
             regionizedWorldData.getFluidLevelTicks().tick(j, 65536, this::tickFluid); // Folia - region ticking
             gameprofilerfiller.pop();
         }
-        timings.scheduledBlocks.stopTiming(); // Paper
+        // timings.scheduledBlocks.stopTiming(); // Paper // TenseiMC - remove timings
 
         gameprofilerfiller.popPush("raid");
-        this.timings.raids.startTiming(); // Paper - timings
+        // this.timings.raids.startTiming(); // Paper - timings // TenseiMC - remove timings
         this.raids.tick();
-        this.timings.raids.stopTiming(); // Paper - timings
+        // this.timings.raids.stopTiming(); // Paper - timings // TenseiMC - remove timings
         gameprofilerfiller.popPush("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
+        // this.timings.chunkProviderTick.startTiming(); // Paper - timings // TenseiMC - remove timings
         this.getChunkSource().tick(shouldKeepTicking, true);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
+        // this.timings.chunkProviderTick.stopTiming(); // Paper - timings // TenseiMC - remove timings
         gameprofilerfiller.popPush("blockEvents");
-        timings.doSounds.startTiming(); // Spigot
+        // timings.doSounds.startTiming(); // Spigot // TenseiMC - remove timings
         this.runBlockEvents();
-        timings.doSounds.stopTiming(); // Spigot
+        // timings.doSounds.stopTiming(); // Spigot // TenseiMC - remove timings
         regionizedWorldData.setHandlingTick(false); // Folia - regionised ticking
         gameprofilerfiller.pop();
         boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
@@ -752,7 +752,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         if (flag || this.emptyTime++ < 300) {
             gameprofilerfiller.push("entities");
-            timings.tickEntities.startTiming(); // Spigot
+            // timings.tickEntities.startTiming(); // Spigot // TenseiMC - remove timings
             if (this.dragonFight != null) {
                 if (io.papermc.paper.util.TickThread.isTickThreadFor(this, 0, 0)) { // Folia - region threading
                 gameprofilerfiller.push("dragonFight");
@@ -769,7 +769,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            timings.entityTick.startTiming(); // Spigot
+            // timings.entityTick.startTiming(); // Spigot // TenseiMC - remove timings
             regionizedWorldData.forEachTickingEntity((entity) -> { // Folia - regionised ticking
                 if (!entity.isRemoved()) {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
@@ -797,8 +797,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     }
                 }
             });
-            timings.entityTick.stopTiming(); // Spigot
-            timings.tickEntities.stopTiming(); // Spigot
+            // timings.entityTick.stopTiming(); // Spigot // TenseiMC - remove timings
+            // timings.tickEntities.stopTiming(); // Spigot // TenseiMC - remove timings
             gameprofilerfiller.pop();
             this.tickBlockEntities();
         }
@@ -982,7 +982,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         // Paper start - optimise random block ticking
         gameprofilerfiller.popPush("randomTick");
-        timings.chunkTicksBlocks.startTiming(); // Paper
+        // timings.chunkTicksBlocks.startTiming(); // Paper // TenseiMC - remove timings
         if (randomTickSpeed > 0) {
             LevelChunkSection[] sections = chunk.getSections();
             int minSection = io.papermc.paper.util.WorldUtil.getMinSection(this);
@@ -1016,7 +1016,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
         }
         // Paper end - optimise random block ticking
-        timings.chunkTicksBlocks.stopTiming(); // Paper
+        // timings.chunkTicksBlocks.stopTiming(); // Paper // TenseiMC - remove timings
         gameprofilerfiller.pop();
     }
 
@@ -1287,9 +1287,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 currentlyTickingEntity.lazySet(entity);
             }
             // Paper end - log detailed entity tick information
-        ++TimingHistory.entityTicks; // Paper - timings
+        // ++TimingHistory.entityTicks; // Paper - timings // TenseiMC - remove timings
         // Spigot start
-        co.aikar.timings.Timing timer; // Paper
+        // co.aikar.timings.Timing timer; // Paper // TenseiMC - remove timings
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
             timer = entity.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
@@ -1300,7 +1300,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Spigot end
         // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-        timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper
+        // timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // TenseiMC - remove timings
         try {
         // Paper end - timings
         entity.setOldPosAndRot();
@@ -1312,7 +1312,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         });
         gameprofilerfiller.incrementCounter("tickNonPassenger");
         if (isActive) { // Paper - EAR 2
-            TimingHistory.activatedEntityTicks++;
+            // TimingHistory.activatedEntityTicks++; // TenseiMC - remove timings
         entity.tick();
         // Folia start - region threading
         if (!io.papermc.paper.util.TickThread.isTickThreadFor(entity)) {
@@ -1326,7 +1326,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Folia end - region threading
         } else { entity.inactiveTick(); } // Paper - EAR 2
         this.getProfiler().pop();
-        } finally { timer.stopTiming(); } // Paper - timings
+        } finally { /*timer.stopTiming();*/ } // Paper - timings // TenseiMC - remove timings
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1349,7 +1349,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (passenger instanceof Player || this.getCurrentWorldData().hasEntityTickingEntity(passenger)) { // Folia - region threading
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
-                co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper
+                // co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper // TenseiMC - remove timings
                 try {
                 // Paper end
                 passenger.setOldPosAndRot();
@@ -1389,7 +1389,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     this.tickPassenger(passenger, entity2);
                 }
 
-            } finally { timer.stopTiming(); }// Paper - EAR2 timings
+            } finally { /*timer.stopTiming();*/ }// Paper - EAR2 timings // TenseiMC - remove timings
             }
         } else {
             passenger.stopRiding();
@@ -1409,14 +1409,14 @@ public class ServerLevel extends Level implements WorldGenLevel {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
         }
 
-        try (co.aikar.timings.Timing ignored = this.timings.worldSave.startTiming()) {
+        // try (co.aikar.timings.Timing ignored = this.timings.worldSave.startTiming()) { // TenseiMC - remove timings
             if (doFull) {
                 this.saveLevelData();
             }
 
-            this.timings.worldSaveChunks.startTiming(); // Paper
+            // this.timings.worldSaveChunks.startTiming(); // Paper // TenseiMC - remove timings
             if (!this.noSave()) chunkproviderserver.saveIncrementally();
-            this.timings.worldSaveChunks.stopTiming(); // Paper
+            // this.timings.worldSaveChunks.stopTiming(); // Paper // TenseiMC - remove timings
 
             // Copied from save()
             // CraftBukkit start - moved from MinecraftServer.saveChunks
@@ -1428,7 +1428,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
             }
             // CraftBukkit end
-        }
+        //} // TenseiMC - remove timings
     }
     // Paper end
 
@@ -1442,7 +1442,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         if (!savingDisabled) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
-            try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
+            // try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper // TenseiMC - remove timings
             if (progressListener != null) {
                 progressListener.progressStartNoAbort(Component.translatable("menu.savingLevel"));
             }
@@ -1452,11 +1452,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
 
-                timings.worldSaveChunks.startTiming(); // Paper
+                // timings.worldSaveChunks.startTiming(); // Paper // TenseiMC - remove timings
             if (!close) chunkproviderserver.save(flush); // Paper - rewrite chunk system
             if (close) chunkproviderserver.close(true); // Paper - rewrite chunk system
-                timings.worldSaveChunks.stopTiming(); // Paper
-            }// Paper
+                // timings.worldSaveChunks.stopTiming(); // Paper // TenseiMC - remove timings
+            // }// Paper // TenseiMC - remove timings
             // Paper - rewrite chunk system - entity saving moved into ChunkHolder
 
         } else if (close) { chunkproviderserver.close(false); } // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index cebfc29c50c631d0f2636f600b1839b2c5515ba1..7e1633e588c6a67f673ac62f8cd7714b016a352a 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2534,7 +2534,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             }
         }
         // Paper End
-        co.aikar.timings.MinecraftTimings.playerCommandTimer.startTiming(); // Paper
+        // co.aikar.timings.MinecraftTimings.playerCommandTimer.startTiming(); // Paper // TenseiMC - remove timings
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
         this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
 
@@ -2544,7 +2544,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         this.cserver.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
+            // co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper // TenseiMC - remove timings
             return;
         }
 
@@ -2557,7 +2557,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
             return;
         } finally {
-            co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
+            // co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper // TenseiMC - remove timings
         }
     }
     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 3c841e67fff54906c7932b1d4a6b00de1200e57f..fb968a4eabebc9a8ae6422881be4c46f2e7e0d72 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,6 @@
 package net.minecraft.server.players;
 
-import co.aikar.timings.MinecraftTimings;
+// import co.aikar.timings.MinecraftTimings; // TenseiMC - remove timings
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1304,7 +1304,7 @@ public abstract class PlayerList {
 
     public void saveAll(int interval) {
         io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
-        MinecraftTimings.savePlayers.startTiming(); // Paper
+        // MinecraftTimings.savePlayers.startTiming(); // Paper // TenseiMC - remove timings
         int numSaved = 0;
         long now = System.nanoTime(); // Folia - region threading
         int max = io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick(); // Folia - region threading
@@ -1324,7 +1324,7 @@ public abstract class PlayerList {
             }
             // Paper end
         }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
+        // MinecraftTimings.savePlayers.stopTiming(); // Paper // TenseiMC - remove timings
         return null; }); // Paper - ensure main
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index ceacc0d383e2ee674783d3c0a7df0a951595faca..e041925e268631895aa6227bb94a7d3fa3dac7ac 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -326,10 +326,10 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         this(factory, spawnGroup, saveable, summonable, fireImmune, spawnableFarFromPlayer, canSpawnInside, dimensions, maxTrackDistance, trackTickInterval, requiredFeatures, "custom");
     }
     public EntityType(EntityType.EntityFactory<T> factory, MobCategory spawnGroup, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, ImmutableSet<Block> canSpawnInside, EntityDimensions dimensions, int maxTrackDistance, int trackTickInterval, FeatureFlagSet requiredFeatures, String id) {
-        this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
-        this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick");
-        this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
-        this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
+        // this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick"); // TenseiMC - remove timings
+        // this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick"); // TenseiMC - remove timings
+        // this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick"); // TenseiMC - remove timings
+        // this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick"); // TenseiMC - remove timings
         // Paper end
         this.builtInRegistryHolder = BuiltInRegistries.ENTITY_TYPE.createIntrusiveHolder(this);
         this.factory = factory;
@@ -685,10 +685,10 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     }
 
     // Paper start - timings
-    public final co.aikar.timings.Timing tickTimer;
-    public final co.aikar.timings.Timing inactiveTickTimer;
-    public final co.aikar.timings.Timing passengerTickTimer;
-    public final co.aikar.timings.Timing passengerInactiveTickTimer;
+    // public final co.aikar.timings.Timing tickTimer; // TenseiMC - remove timings
+    // public final co.aikar.timings.Timing inactiveTickTimer; // TenseiMC - remove timings
+    // public final co.aikar.timings.Timing passengerTickTimer; // TenseiMC - remove timings
+    // public final co.aikar.timings.Timing passengerInactiveTickTimer; // TenseiMC - remove timings
     // Paper end
     public boolean trackDeltas() {
         return this != EntityType.PLAYER && this != EntityType.LLAMA_SPIT && this != EntityType.WITHER && this != EntityType.BAT && this != EntityType.ITEM_FRAME && this != EntityType.GLOW_ITEM_FRAME && this != EntityType.LEASH_KNOT && this != EntityType.PAINTING && this != EntityType.END_CRYSTAL && this != EntityType.EVOKER_FANGS;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 49716190b784339b80c8a3ac8e5b13bc450284ee..7a80e7eed5e2c0ee60df2e2ac958c98f91fec077 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -141,7 +141,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
 
 public abstract class LivingEntity extends Entity implements Attackable {
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 57ef7fbba3028c28231abf7b7ae78aa019323536..8ae40c09f19e7e3baaad3c47d4d4d2a522fa8d87 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -15,7 +15,7 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     private final int maxDuration;
     // Paper start - configurable behavior tick rate and timings
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
+    // private final co.aikar.timings.Timing timing; // TenseiMC - remove timings
     // Paper end
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState) {
@@ -37,7 +37,7 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
+        // this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey); // TenseiMC - remove timings
         // Paper end
     }
 
@@ -58,9 +58,9 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
             this.status = Behavior.Status.RUNNING;
             int i = this.minDuration + world.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
             this.endTimestamp = time + (long)i;
-            this.timing.startTiming(); // Paper - behavior timings
+            // this.timing.startTiming(); // Paper - behavior timings // TenseiMC - remove timings
             this.start(world, entity, time);
-            this.timing.stopTiming(); // Paper - behavior timings
+            // this.timing.stopTiming(); // Paper - behavior timings // TenseiMC - remove timings
             return true;
         } else {
             return false;
@@ -72,13 +72,13 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final void tickOrStop(ServerLevel world, E entity, long time) {
-        this.timing.startTiming(); // Paper - behavior timings
+        // this.timing.startTiming(); // Paper - behavior timings // TenseiMC - remove timings
         if (!this.timedOut(time) && this.canStillUse(world, entity, time)) {
             this.tick(world, entity, time);
         } else {
             this.doStop(world, entity, time);
         }
-        this.timing.stopTiming(); // Paper - behavior timings
+        // this.timing.stopTiming(); // Paper - behavior timings // TenseiMC - remove timings
 
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index fcdb9bde8e1605e30dde3e580491522d4b62cdc0..e1a2612dbfabaea801fca7b13410f1044c78908e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -21,7 +21,7 @@ public abstract class Sensor<E extends LivingEntity> {
     private long timeToTick;
     // Paper start - configurable sensor tick rate and timings
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
+    // private final co.aikar.timings.Timing timing; // TenseiMC - remove timings
     // Paper end
 
     public Sensor(int senseInterval) {
@@ -32,7 +32,7 @@ public abstract class Sensor<E extends LivingEntity> {
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval);
+        // this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval); // TenseiMC - remove timings
         // Paper end
         this.scanRate = senseInterval;
         this.timeToTick = (long)RANDOM.nextInt(senseInterval);
@@ -46,10 +46,10 @@ public abstract class Sensor<E extends LivingEntity> {
         if (--this.timeToTick <= 0L) {
             // Paper start - configurable sensor tick rate and timings
             this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), this.scanRate);
-            this.timing.startTiming();
+            // this.timing.startTiming(); // TenseiMC - remove timings
             // Paper end
             this.doTick(world, entity);
-            this.timing.stopTiming(); // Paper - sensor timings
+            // this.timing.stopTiming(); // Paper - sensor timings // TenseiMC - remove timings
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 640b36d421cb7a45d9a329bb59cf2dd23e8241e8..67004a18ac1ca100dc9103e308b2749b71001a06 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1,7 +1,7 @@
 package net.minecraft.world.level;
 
-import co.aikar.timings.Timing;
-import co.aikar.timings.Timings;
+// import co.aikar.timings.Timing; // TenseiMC - remove timings
+// import co.aikar.timings.Timings; // TenseiMC - remove timings
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.MoreObjects;
@@ -169,7 +169,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final fr.euphilia.tenseimc.TenseiWorldConfig tenseiWorldConfig; // TenseiMC
-    public final co.aikar.timings.WorldTimingsHandler timings; // Paper
+    // public final co.aikar.timings.WorldTimingsHandler timings; // Paper // TenseiMC - remove timings
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
@@ -376,7 +376,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             public void onBorderSetDamageSafeZOne(WorldBorder border, double safeZoneRadius) {}
         });
         // CraftBukkit end
-        timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
+        // timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings // TenseiMC - remove timings
         this.keepSpawnInMemory = this.paperConfig().spawn.keepSpawnLoaded; // Paper
         this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
@@ -917,14 +917,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         ProfilerFiller gameprofilerfiller = this.getProfiler();
 
         gameprofilerfiller.push("blockEntities");
-        timings.tileEntityPending.startTiming(); // Spigot
+        // timings.tileEntityPending.startTiming(); // Spigot  // TenseiMC - remove timings
         final io.papermc.paper.threadedregions.RegionizedWorldData regionizedWorldData = ((ServerLevel)this).getCurrentWorldData(); // Folia - regionised ticking
         regionizedWorldData.seTtickingBlockEntities(true); // Folia - regionised ticking
         regionizedWorldData.pushPendingTickingBlockEntities(); // Folia - regionised ticking
         List<TickingBlockEntity> blockEntityTickers = regionizedWorldData.getBlockEntityTickers(); // Folia - regionised ticking
-        timings.tileEntityPending.stopTiming(); // Spigot
+        // timings.tileEntityPending.stopTiming(); // Spigot // TenseiMC - remove timings
 
-        timings.tileEntityTick.startTiming(); // Spigot
+        // timings.tileEntityTick.startTiming(); // Spigot // TenseiMC - remove timings
         // Spigot start
         // Iterator iterator = this.blockEntityTickers.iterator();
         int tilesThisCycle = 0;
@@ -956,7 +956,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         }
         blockEntityTickers.removeAll(toRemove); // Folia - regionised ticking
 
-        timings.tileEntityTick.stopTiming(); // Spigot
+        // timings.tileEntityTick.stopTiming(); // Spigot // TenseiMC - remove timings
         regionizedWorldData.seTtickingBlockEntities(false); // Folia - regionised ticking
         //co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper // Folia - region threading
         gameprofilerfiller.pop();
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 52a7d5ef4a25bee618d9c9a784df95a2341fe015..9c72cc67ffc24d5bb5b8c68d828795809248cdae 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -129,7 +129,7 @@ public final class NaturalSpawner {
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
         world.getProfiler().push("spawner");
-        world.timings.mobSpawn.startTiming(); // Spigot
+        // world.timings.mobSpawn.startTiming(); // Spigot // TenseiMC - remove timings
         MobCategory[] aenumcreaturetype = NaturalSpawner.SPAWNING_CATEGORIES;
         int i = aenumcreaturetype.length;
 
@@ -160,7 +160,7 @@ public final class NaturalSpawner {
             }
         }
 
-        world.timings.mobSpawn.stopTiming(); // Spigot
+        // world.timings.mobSpawn.stopTiming(); // Spigot // TenseiMC - remove timings
         world.getProfiler().pop();
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index e5ca38b375becfb3a10fb94739bdaed354c426c6..34ffce501e909fcc8ec91392335c96d473a0ef0f 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -103,13 +103,14 @@ public class Block extends BlockBehaviour implements ItemLike {
             this != Blocks.STRUCTURE_BLOCK &&
             this != Blocks.JIGSAW;
     }
+    /* // TenseiMC start - remove timings
     public co.aikar.timings.Timing timing;
     public co.aikar.timings.Timing getTiming() {
         if (timing == null) {
             timing = co.aikar.timings.MinecraftTimings.getBlockTiming(this);
         }
         return timing;
-    }
+    }*/ // TenseiMC end - remove timings
     // Paper end
     @Nullable
     private String descriptionId;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index ac1f6d5c78c1970b3242c017031679fb9a906fb0..2835be22bc40733f0374e2172610197d62781c54 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -21,14 +21,14 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
+// import org.spigotmc.CustomTimingsHandler; // Spigot // TenseiMC - remove timings
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
+// import co.aikar.timings.Timing; // Paper // TenseiMC - remove timings
 
 public abstract class BlockEntity {
     static final ThreadLocal<Boolean> IGNORE_TILE_UPDATES = ThreadLocal.withInitial(() -> Boolean.FALSE); // Paper // Folia - region threading
 
-    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
+    // public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper // TenseiMC - remove timings
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     public CraftPersistentDataContainer persistentDataContainer;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index e78bb4416d9fac6465738071b529564a6d47391b..47a838b416c214a8975d7b792b3d51c866a7149f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -831,7 +831,7 @@ public class LevelChunk extends ChunkAccess {
             this.chunkHolder.getEntityChunk().callEntitiesLoadEvent(); // Paper - rewrite chunk system
 
             if (this.needsDecoration) {
-                try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper
+                // try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper // TenseiMC - remove timings
                 this.needsDecoration = false;
                 java.util.Random random = new java.util.Random();
                 random.setSeed(this.level.getSeed());
@@ -851,7 +851,7 @@ public class LevelChunk extends ChunkAccess {
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
-                } // Paper
+                // } // Paper // TenseiMC - remove timings
             }
         }
     }
@@ -1238,7 +1238,7 @@ public class LevelChunk extends ChunkAccess {
                         ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
 
                         gameprofilerfiller.push(this::getType);
-                        this.blockEntity.tickTimer.startTiming(); // Spigot
+                        // this.blockEntity.tickTimer.startTiming(); // Spigot // TenseiMC - remove timings
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1260,7 +1260,7 @@ public class LevelChunk extends ChunkAccess {
                         // Paper end
                         // Spigot start
                     } finally {
-                        this.blockEntity.tickTimer.stopTiming();
+                        // this.blockEntity.tickTimer.stopTiming(); // TenseiMC - remove timings
                         // Spigot end
                     }
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 9136fb30db749737e9f189d0901024fcad02e402..115ef56478143c49155629d33b5493b5f0b03fd8 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.scheduler;
 
-import co.aikar.timings.MinecraftTimings; // Paper
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -305,7 +305,7 @@ public class CraftScheduler implements BukkitScheduler {
                         }
                         return false;
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
+                }){{/*this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();*/}}; // Paper // TenseiMC - remove timings
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -345,7 +345,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);}}; // Paper
+                }){{/*this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);*/}}; // Paper // TenseiMC - remove timings
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -516,10 +516,10 @@ public class CraftScheduler implements BukkitScheduler {
                 this.runners.remove(task.getTaskId());
             }
         }
-        MinecraftTimings.bukkitSchedulerFinishTimer.startTiming(); // Paper
+        // MinecraftTimings.bukkitSchedulerFinishTimer.startTiming(); // Paper // TenseiMC - remove timings
         this.pending.addAll(temp);
         temp.clear();
-        MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming(); // Paper
+        // MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming(); // Paper // TenseiMC - remove timings
         //this.debugHead = this.debugHead.getNextHead(currentTick); // Paper
     }
 
@@ -564,7 +564,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     void parsePending() { // Paper
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper
+        // if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper // TenseiMC - remove timings
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -583,7 +583,7 @@ public class CraftScheduler implements BukkitScheduler {
             task.setNext(null);
         }
         this.head = lastTask;
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper
+        // if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper // TenseiMC - remove timings
     }
 
     private boolean isReady(final int currentTick) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 3f45bab0e9f7b3697e6d9d1092a1e6e579f7066f..2bda0a072e9bc91662a72cbbf09ab8b48e452f62 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -2,14 +2,14 @@ package org.bukkit.craftbukkit.scheduler;
 
 import java.util.function.Consumer;
 
-import co.aikar.timings.NullTimingHandler;
+// import co.aikar.timings.NullTimingHandler; // TenseiMC - remove timings
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
+// import org.spigotmc.CustomTimingsHandler; // Spigot // TenseiMC - remove timings
+// import co.aikar.timings.MinecraftTimings; // Paper // TenseiMC - remove timings
+// import co.aikar.timings.Timing; // Paper // TenseiMC - remove timings
 
 public class CraftTask implements BukkitTask, Runnable { // Spigot
 
@@ -31,7 +31,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private long nextRun;
     public final Runnable rTask; // Paper
     public final Consumer<BukkitTask> cTask; // Paper
-    public Timing timings; // Paper
+    // public Timing timings; // Paper // TenseiMC - remove timings
     private final Plugin plugin;
     private final int id;
     private final long createdAt = System.nanoTime();
@@ -55,7 +55,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.id = id;
         this.period = CraftTask.NO_REPEATING;
         this.taskName = taskName;
-        this.timings = MinecraftTimings.getInternalTaskName(taskName);
+        // this.timings = MinecraftTimings.getInternalTaskName(taskName); // TenseiMC - remove timings
     }
     // Paper end
 
@@ -76,7 +76,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         }
         this.id = id;
         this.period = period;
-        timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : NullTimingHandler.NULL; // Paper
+        // timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : NullTimingHandler.NULL; // Paper // TenseiMC - remove timings
     }
 
     @Override
@@ -96,13 +96,13 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public void run() {
-        try (Timing ignored = timings.startTiming()) { // Paper
+        //try (Timing ignored = timings.startTiming()) { // Paper // TenseiMC - remove timings
         if (this.rTask != null) {
             this.rTask.run();
         } else {
             this.cTask.accept(this);
         }
-        } // Paper
+        //} // Paper // TenseiMC - remove timings
     }
 
     long getCreatedAt() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 071289fe33f444b903b61d6ec34c9ca4873c9ac5..660929c37ddbfe8ff8be7edccf6ae9e95b82c8f4 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -117,7 +117,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     public void getScoreboardScores(ObjectiveCriteria criteria, String name, Consumer<Score> consumer) {
         // Paper start - add timings for scoreboard search
         // plugins leaking scoreboards will make this very expensive, let server owners debug it easily
-        co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.startTimingIfSync();
+        // co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.startTimingIfSync(); // TenseiMC - remove timings
         try {
         // Paper end - add timings for scoreboard search
         for (CraftScoreboard scoreboard : this.scoreboards) {
@@ -125,7 +125,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
             board.forAllObjectives(criteria, name, (score) -> consumer.accept(score));
         }
         } finally { // Paper start - add timings for scoreboard search
-            co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.stopTimingIfSync();
+            // co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.stopTimingIfSync(); // TenseiMC - remove timings
         }
         // Paper end - add timings for scoreboard search
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 3dc2223bcdffb425f207e7418a8bcc55db26842f..2ab3f36d3fd225fc804440cd1092704cb5971d95 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -227,7 +227,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // Paper start
     @Override
     public void reportTimings() {
-        co.aikar.timings.TimingsExport.reportTimings();
+        // co.aikar.timings.TimingsExport.reportTimings(); // TenseiMC - remove timings
     }
     // Paper end
 
@@ -473,7 +473,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // Paper start
     @Override
     public String getTimingsServerName() {
-        return io.papermc.paper.configuration.GlobalConfiguration.get().timings.serverName;
+        return ""; // io.papermc.paper.configuration.GlobalConfiguration.get().timings.serverName; // TenseiMC - remove timings
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 806894e6db5d78e85c7bad48c0685151c270d0c1..4592536c7f4720f67ffb9d171386a762bd44679a 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -34,7 +34,7 @@ import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.projectile.ThrowableProjectile;
 import net.minecraft.world.entity.projectile.ThrownTrident;
 import net.minecraft.world.entity.raid.Raider;
-import co.aikar.timings.MinecraftTimings;
+// import co.aikar.timings.MinecraftTimings; // TenseiMC - remove timings
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
@@ -166,7 +166,7 @@ public class ActivationRange
      */
     public static void activateEntities(Level world)
     {
-        MinecraftTimings.entityActivationCheckTimer.startTiming();
+        // MinecraftTimings.entityActivationCheckTimer.startTiming(); // TenseiMC - remove timings
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -223,7 +223,7 @@ public class ActivationRange
             }
             // Paper end
         }
-        MinecraftTimings.entityActivationCheckTimer.stopTiming();
+        // MinecraftTimings.entityActivationCheckTimer.stopTiming(); // TenseiMC - remove timings
     }
 
     /**
